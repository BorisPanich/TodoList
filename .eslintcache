[{"D:\\boris\\programming\\it-incubator\\TodoList\\src\\app\\store.ts":"1","D:\\boris\\programming\\it-incubator\\TodoList\\src\\app\\app-reducer.ts":"2","D:\\boris\\programming\\it-incubator\\TodoList\\src\\features\\TodolistsList\\tasks-reducer.ts":"3","D:\\boris\\programming\\it-incubator\\TodoList\\src\\api\\todolists-api.ts":"4","D:\\boris\\programming\\it-incubator\\TodoList\\src\\features\\TodolistsList\\Todolist\\Todolist.tsx":"5","D:\\boris\\programming\\it-incubator\\TodoList\\src\\components\\EditableSpan\\EditableSpan.tsx":"6","D:\\boris\\programming\\it-incubator\\TodoList\\src\\app\\App.tsx":"7","D:\\boris\\programming\\it-incubator\\TodoList\\src\\features\\Login\\Login.tsx":"8","D:\\boris\\programming\\it-incubator\\TodoList\\src\\features\\Login\\authReducer.ts":"9","D:\\boris\\programming\\it-incubator\\TodoList\\src\\features\\TodolistsList\\TodolistsList.tsx":"10","D:\\boris\\programming\\it-incubator\\TodoList\\src\\reportWebVitals.ts":"11","D:\\boris\\programming\\it-incubator\\TodoList\\src\\components\\ErrorSnackbar\\ErrorSnackbar.tsx":"12","D:\\boris\\programming\\it-incubator\\TodoList\\src\\components\\AddItemForm\\AddItemForm.tsx":"13","D:\\boris\\programming\\it-incubator\\TodoList\\src\\features\\TodolistsList\\Todolist\\Task\\Task.tsx":"14"},{"size":1097,"mtime":1597327450000,"results":"15","hashOfConfig":"16"},{"size":2459,"mtime":1619147319738,"results":"17","hashOfConfig":"16"},{"size":5633,"mtime":1596722126000,"results":"18","hashOfConfig":"16"},{"size":3109,"mtime":1619148075359,"results":"19","hashOfConfig":"16"},{"size":4195,"mtime":1619116688191,"results":"20","hashOfConfig":"16"},{"size":952,"mtime":1594154724000,"results":"21","hashOfConfig":"16"},{"size":2650,"mtime":1619148411258,"results":"22","hashOfConfig":"16"},{"size":3659,"mtime":1619117014260,"results":"23","hashOfConfig":"16"},{"size":2001,"mtime":1619148255879,"results":"24","hashOfConfig":"16"},{"size":4033,"mtime":1619117234169,"results":"25","hashOfConfig":"16"},{"size":425,"mtime":1607869388000,"results":"26","hashOfConfig":"16"},{"size":1092,"mtime":1596716576000,"results":"27","hashOfConfig":"16"},{"size":1595,"mtime":1596715562000,"results":"28","hashOfConfig":"16"},{"size":1773,"mtime":1596295538000,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"132tjpl",{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"37"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"37"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"37"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"62"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\boris\\programming\\it-incubator\\TodoList\\src\\app\\store.ts",[],"D:\\boris\\programming\\it-incubator\\TodoList\\src\\app\\app-reducer.ts",[],"D:\\boris\\programming\\it-incubator\\TodoList\\src\\features\\TodolistsList\\tasks-reducer.ts",["65","66"],"import {AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType} from './todolists-reducer'\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils'\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id != action.taskId)}\r\n        case 'ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todolist.id]: []}\r\n        case 'REMOVE-TODOLIST':\r\n            const copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        case 'SET-TODOLISTS': {\r\n            const copyState = {...state}\r\n            action.todolists.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n        case 'SET-TASKS':\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTaskAC = (taskId: string, todolistId: string) =>\r\n    ({type: 'REMOVE-TASK', taskId, todolistId} as const)\r\nexport const addTaskAC = (task: TaskType) =>\r\n    ({type: 'ADD-TASK', task} as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>\r\n    ({type: 'UPDATE-TASK', model, todolistId, taskId} as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) =>\r\n    ({type: 'SET-TASKS', tasks, todolistId} as const)\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppStatusActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            dispatch(setTasksAC(tasks, todolistId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            const action = removeTaskAC(taskId, todolistId)\r\n            dispatch(action)\r\n        })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                const action = addTaskAC(task)\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: ThunkDispatch, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = updateTaskAC(taskId, domainModel, todolistId)\r\n                    dispatch(action)\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch);\r\n            })\r\n    }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setTasksAC>\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>\r\n",["67","68"],"D:\\boris\\programming\\it-incubator\\TodoList\\src\\api\\todolists-api.ts",[],"D:\\boris\\programming\\it-incubator\\TodoList\\src\\features\\TodolistsList\\Todolist\\Todolist.tsx",["69","70","71","72","73","74"],"import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValuesType, TodolistDomainType} from '../todolists-reducer'\r\nimport {useDispatch} from 'react-redux'\r\nimport {fetchTasksTC} from '../tasks-reducer'\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        const thunk = fetchTasksTC(props.todolist.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","D:\\boris\\programming\\it-incubator\\TodoList\\src\\components\\EditableSpan\\EditableSpan.tsx",[],"D:\\boris\\programming\\it-incubator\\TodoList\\src\\app\\App.tsx",["75"],"D:\\boris\\programming\\it-incubator\\TodoList\\src\\features\\Login\\Login.tsx",["76"],"import React from 'react'\r\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loginTC} from \"./authReducer\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>((state) => state.auth.isLoggedIn)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required fild email can not zero';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length < 5) {\r\n                errors.password = 'Must be 5 characters or less';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n            formik.resetForm()      // Зачистка после ввода\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={'/'} />\r\n    }\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}>here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        {formik.touched.email && formik.errors.email                 // touched если email тронут\r\n                        && <div style={{color: 'red'}}>{formik.errors.email}</div>}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('password')}\r\n                        />\r\n                        {formik.touched.password && formik.errors.password\r\n                        && <div style={{color: 'red'}}>{formik.errors.password}</div>}\r\n                        <FormControlLabel\r\n                            label={\"Remember me\"}\r\n                            control={<Checkbox\r\n                                {...formik.getFieldProps('rememberMe')}/>}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n\r\n","D:\\boris\\programming\\it-incubator\\TodoList\\src\\features\\Login\\authReducer.ts",["77"],"D:\\boris\\programming\\it-incubator\\TodoList\\src\\features\\TodolistsList\\TodolistsList.tsx",["78","79","80","81","82","83","84","85"],"import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from './tasks-reducer'\r\nimport {TaskStatuses} from '../../api/todolists-api'\r\nimport {Grid, Paper} from '@material-ui/core'\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch();\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>((state) => state.auth.isLoggedIn)\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return;\r\n        }\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC(id, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value)\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={'/login'} />\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                                demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","D:\\boris\\programming\\it-incubator\\TodoList\\src\\reportWebVitals.ts",[],"D:\\boris\\programming\\it-incubator\\TodoList\\src\\components\\ErrorSnackbar\\ErrorSnackbar.tsx",[],"D:\\boris\\programming\\it-incubator\\TodoList\\src\\components\\AddItemForm\\AddItemForm.tsx",["86","87","88"],"import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {Box, Button, FormControl, IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function({addItem, disabled = false}: AddItemFormPropsType) {\r\n    console.log(\"AddItemForm called\")\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== \"\") {\r\n            addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n})\r\n",["89","90"],"D:\\boris\\programming\\it-incubator\\TodoList\\src\\features\\TodolistsList\\Todolist\\Task\\Task.tsx",["91","92","93"],{"ruleId":"94","severity":1,"message":"95","line":5,"column":9,"nodeType":"96","messageId":"97","endLine":5,"endColumn":22},{"ruleId":"98","severity":1,"message":"99","line":13,"column":94,"nodeType":"100","messageId":"101","endLine":13,"endColumn":96},{"ruleId":"102","replacedBy":"103"},{"ruleId":"104","replacedBy":"105"},{"ruleId":"106","severity":1,"message":"107","line":36,"column":8,"nodeType":"108","endLine":36,"endColumn":10,"suggestions":"109"},{"ruleId":"106","severity":1,"message":"110","line":40,"column":8,"nodeType":"108","endLine":40,"endColumn":42,"suggestions":"111"},{"ruleId":"106","severity":1,"message":"110","line":47,"column":8,"nodeType":"108","endLine":47,"endColumn":54,"suggestions":"112"},{"ruleId":"106","severity":1,"message":"110","line":49,"column":95,"nodeType":"108","endLine":49,"endColumn":134,"suggestions":"113"},{"ruleId":"106","severity":1,"message":"110","line":50,"column":101,"nodeType":"108","endLine":50,"endColumn":140,"suggestions":"114"},{"ruleId":"106","severity":1,"message":"110","line":51,"column":107,"nodeType":"108","endLine":51,"endColumn":146,"suggestions":"115"},{"ruleId":null,"fatal":true,"severity":2,"message":"116","line":44,"column":27},{"ruleId":"117","severity":1,"message":"118","line":58,"column":32,"nodeType":"119","endLine":58,"endColumn":49},{"ruleId":"94","severity":1,"message":"120","line":3,"column":35,"nodeType":"96","messageId":"97","endLine":3,"endColumn":47},{"ruleId":"106","severity":1,"message":"121","line":36,"column":8,"nodeType":"108","endLine":36,"endColumn":10,"suggestions":"122"},{"ruleId":"106","severity":1,"message":"123","line":41,"column":8,"nodeType":"108","endLine":41,"endColumn":10,"suggestions":"124"},{"ruleId":"106","severity":1,"message":"123","line":46,"column":8,"nodeType":"108","endLine":46,"endColumn":10,"suggestions":"125"},{"ruleId":"106","severity":1,"message":"123","line":51,"column":8,"nodeType":"108","endLine":51,"endColumn":10,"suggestions":"126"},{"ruleId":"106","severity":1,"message":"123","line":56,"column":8,"nodeType":"108","endLine":56,"endColumn":10,"suggestions":"127"},{"ruleId":"106","severity":1,"message":"123","line":61,"column":8,"nodeType":"108","endLine":61,"endColumn":10,"suggestions":"128"},{"ruleId":"106","severity":1,"message":"123","line":66,"column":8,"nodeType":"108","endLine":66,"endColumn":10,"suggestions":"129"},{"ruleId":"106","severity":1,"message":"123","line":71,"column":8,"nodeType":"108","endLine":71,"endColumn":10,"suggestions":"130"},{"ruleId":"94","severity":1,"message":"131","line":2,"column":9,"nodeType":"96","messageId":"97","endLine":2,"endColumn":12},{"ruleId":"94","severity":1,"message":"132","line":2,"column":14,"nodeType":"96","messageId":"97","endLine":2,"endColumn":20},{"ruleId":"94","severity":1,"message":"133","line":2,"column":22,"nodeType":"96","messageId":"97","endLine":2,"endColumn":33},{"ruleId":"102","replacedBy":"134"},{"ruleId":"104","replacedBy":"135"},{"ruleId":"106","severity":1,"message":"110","line":15,"column":97,"nodeType":"108","endLine":15,"endColumn":130,"suggestions":"136"},{"ruleId":"106","severity":1,"message":"110","line":20,"column":8,"nodeType":"108","endLine":20,"endColumn":41,"suggestions":"137"},{"ruleId":"106","severity":1,"message":"110","line":24,"column":8,"nodeType":"108","endLine":24,"endColumn":41,"suggestions":"138"},"@typescript-eslint/no-unused-vars","'setAppErrorAC' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-native-reassign",["139"],"no-negated-in-lhs",["140"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'demo', 'dispatch', and 'props.todolist.id'. Either include them or remove the dependency array.","ArrayExpression",["141"],"React Hook useCallback has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useCallback call and refer to those specific props inside useCallback.",["142"],["143"],["144"],["145"],["146"],"Parsing error: Expression expected.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","'todolistsAPI' is defined but never used.","React Hook useEffect has missing dependencies: 'demo', 'dispatch', and 'isLoggedIn'. Either include them or remove the dependency array.",["147"],"React Hook useCallback has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["148"],["149"],["150"],["151"],["152"],["153"],["154"],"'Box' is defined but never used.","'Button' is defined but never used.","'FormControl' is defined but never used.",["139"],["140"],["155"],["156"],["157"],"no-global-assign","no-unsafe-negation",{"desc":"158","fix":"159"},{"desc":"160","fix":"161"},{"desc":"160","fix":"162"},{"desc":"160","fix":"163"},{"desc":"160","fix":"164"},{"desc":"160","fix":"165"},{"desc":"166","fix":"167"},{"desc":"168","fix":"169"},{"desc":"168","fix":"170"},{"desc":"168","fix":"171"},{"desc":"168","fix":"172"},{"desc":"168","fix":"173"},{"desc":"168","fix":"174"},{"desc":"168","fix":"175"},{"desc":"160","fix":"176"},{"desc":"160","fix":"177"},{"desc":"160","fix":"178"},"Update the dependencies array to be: [demo, dispatch, props.todolist.id]",{"range":"179","text":"180"},"Update the dependencies array to be: [props]",{"range":"181","text":"182"},{"range":"183","text":"182"},{"range":"184","text":"182"},{"range":"185","text":"182"},{"range":"186","text":"182"},"Update the dependencies array to be: [demo, dispatch, isLoggedIn]",{"range":"187","text":"188"},"Update the dependencies array to be: [dispatch]",{"range":"189","text":"190"},{"range":"191","text":"190"},{"range":"192","text":"190"},{"range":"193","text":"190"},{"range":"194","text":"190"},{"range":"195","text":"190"},{"range":"196","text":"190"},{"range":"197","text":"182"},{"range":"198","text":"182"},{"range":"199","text":"182"},[1466,1468],"[demo, dispatch, props.todolist.id]",[1583,1617],"[props]",[1848,1894],[1993,2032],[2135,2174],[2283,2322],[1329,1331],"[demo, dispatch, isLoggedIn]",[1500,1502],"[dispatch]",[1671,1673],[1876,1878],[2089,2091],[2290,2292],[2437,2439],[2616,2618],[765,798],[1071,1104],[1261,1294]]